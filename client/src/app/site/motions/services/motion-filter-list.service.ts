import { Injectable } from "@angular/core";

import { FilterListService, OsFilter } from "../../../core/services/filter-list.service";
import { Motion } from "../../../shared/models/motions/motion";
import { ViewMotion } from "../models/view-motion";
import { CategoryRepositoryService } from "./category-repository.service";
import { WorkflowRepositoryService } from "./workflow-repository.service";
import { StorageService } from "../../../core/services/storage.service";
import { MotionRepositoryService } from "./motion-repository.service";
import { MotionBlockRepositoryService } from "./motion-block-repository.service";

@Injectable({
    providedIn: 'root'
})
export class MotionFilterListService extends FilterListService<Motion, ViewMotion> {

    protected name = 'Motion';
    /**
     * getter for the filterOptions. Note that in this case, the options are
     * generated dynamically, as the options change with the datastore
     */
    public get filterOptions(): OsFilter[] {
        return [
            this.flowFilterOptions,
            this.categoryFilterOptions,
            this.motionBlockFilterOptions
        ].concat(
            this.staticFilterOptions);
    }

    /**
     * Filter definitions for the workflow filter. Options will be generated by
     * getFilterOptions (as the workflows available may change)
     */
    public flowFilterOptions = {
        property: 'state',
        label: 'State',
        isActive: false,
        options: []
    };

    /**
     * Filter definitions for the category filter. Options will be generated by
     * getFilterOptions (as the categories available may change)
     */
    public categoryFilterOptions = {
        property: 'category',
        isActive: false,
        options: []
    };

    public motionBlockFilterOptions = {
        property: 'motion_block_id',
        label: 'Motion block',
        isActive: false,
        options: []
    }
    public commentFilterOptions = {
        property: 'comment',
        isActive: false,
        options: []
    }



    public staticFilterOptions = [
        // TODO favorite (attached to user:whoamI!)
        // TODO personalNote (attached to user:whoamI!)
    ];

    public constructor(store: StorageService,
        private workflowRepo: WorkflowRepositoryService,
        private categoryRepo: CategoryRepositoryService,
        private motionBlockRepo: MotionBlockRepositoryService,
        // private commentRepo: MotionCommentRepositoryService
        motionRepo: MotionRepositoryService,

        ){
        super(store, motionRepo);
        this.subscribeWorkflows();
        this.subscribeCategories();
        this.subscribeMotionBlocks();
        this.subscribeComments();
    }

    private subscribeMotionBlocks(): void {
        this.motionBlockRepo.getViewModelListObservable().subscribe(motionBlocks => {
            const motionBlockOptions = [];
            motionBlocks.forEach(mb => {
                motionBlockOptions.push({
                    condition: mb.id,
                    label: mb.title,
                    isActive: false
                });
            });
            motionBlockOptions.push('-');
            motionBlockOptions.push({
                condition: null,
                label: 'No motion block set',
                isActive: false
            });
            this.motionBlockFilterOptions.options = motionBlockOptions;
            this.updateFilterDefinitions(this.filterOptions);
        });
    }

    private subscribeCategories(): void {
        this.categoryRepo.getViewModelListObservable().subscribe(categories => {
            const categoryOptions = [];
            categories.forEach(cat => {
                categoryOptions.push({
                    condition: cat.id,
                    label: cat.prefixedName,
                    isActive: false
                });
            });
            this.categoryFilterOptions.options = categoryOptions;
            this.updateFilterDefinitions(this.filterOptions);
        });
    }

    private subscribeWorkflows(): void {
        this.workflowRepo.getViewModelListObservable().subscribe(workflows => {
            const workflowOptions = [];
            workflows.forEach(workflow => {
                workflowOptions.push(workflow.name);
                workflow.states.forEach(state => {
                        workflowOptions.push({
                            condition: state.name,
                            label: state.name,
                            isActive: false
                        });
                });
            });
            workflowOptions.push('-');
            workflowOptions.push({
                condition: null,
                label: 'no workflow set',
                isActive: false
            });
            this.flowFilterOptions.options = workflowOptions;
            this.updateFilterDefinitions(this.filterOptions);
        });
    }

    private subscribeComments(): void {
        // TODO
    }
}
